package org.jumao.bi.service.impl.trade.register;

import org.apache.log4j.Logger;
import org.jumao.bi.entites.trade.register.ChartResp;
import org.jumao.bi.entites.trade.register.RegLineChart;
import org.jumao.bi.utis.LogUtils;
import org.jumao.bi.utis.RegCalUtils;
import org.jumao.bi.utis.RegDateUtils;
import org.jumao.bi.utis.StringUtils;

import java.util.*;

/**
 * Created by kartty on 2017/5/3.
 */
public class ChartServiceHelper {

    private Logger logger = Logger.getLogger(ChartServiceHelper.class);

    public static Map<Integer, String> dataSrcNameMap = new HashMap<Integer, String>();
    public static Map<Integer, String> compCategoryMap = new HashMap<Integer, String>();
    public static Map<Integer, String> licTpyeNameMap = new HashMap<Integer, String>();
    public static Map<Integer, String> industryIdNameMap = new HashMap<Integer, String>();
    public static String ELSE_NAME = "其他";

    static {
        //1 前台注册 2 后台创建 3 中台自己注册 4 中台管理员创建 98 手动创建 99 认证中心同步
        dataSrcNameMap.put(1, "前台注册");
        dataSrcNameMap.put(2, "后台创建");
        dataSrcNameMap.put(3, "中台自己注册");
        dataSrcNameMap.put(4, "中台管理员创建");
        dataSrcNameMap.put(98, "手动创建");
        dataSrcNameMap.put(99, "认证中心同步");

        compCategoryMap.put(1, "工厂");
        compCategoryMap.put(2, "贸易商");
        compCategoryMap.put(3, "工贸一体");

        //0 多证合一 1 普通三证
        licTpyeNameMap.put(0, "多证合一");
        licTpyeNameMap.put(1, "普通三证");

        industryIdNameMap.put(1, "煤炭");
        industryIdNameMap.put(2, "有色");
        industryIdNameMap.put(3, "矿产");
        industryIdNameMap.put(4, "农产品");
        industryIdNameMap.put(5, "钢铁");
        industryIdNameMap.put(6, "消费品");
        industryIdNameMap.put(7, "食品");
        industryIdNameMap.put(8, "工业品");
        industryIdNameMap.put(9, "机械");
        industryIdNameMap.put(10, "化工");
        industryIdNameMap.put(11, "石油");
    }


    protected String checkTypeName(Integer type, String name) {
        if (name == null) {
            String typeStr = null;
            if (type == null) {
                typeStr = "n";
            } else {
                typeStr = String.valueOf(type);
            }
            name = StringUtils.joinStr(ChartServiceHelper.ELSE_NAME, "#", typeStr);
        }
        return name;
    }


    protected String dealRatePercent(double top, double bottom, boolean transToPercent) {
        double res = 0D;
        if (transToPercent) {
            res = top / bottom * 100;
        } else {
            res = top / bottom;
        }
        String rate = String.valueOf(res);
        StringBuilder sb = new StringBuilder();

        if (bottom != 0D) {
            int len = rate.length();
            int dotIdx = rate.indexOf(".");
            if (dotIdx > 0 && len > dotIdx + 3) {
                rate = rate.substring(0, dotIdx + 3);
            }
        }

        sb.append(rate);
        if (transToPercent) {
            sb.append("%");
        }
        return sb.toString();
    }


    @Deprecated
    protected List<Map<String,Long>> genTypeNameTotalMaps(Map<String, ChartResp> legendCpMap) {
        List<Map<String, Long>> typeNameTotalMaps = new ArrayList<Map<String, Long>>();

        for (Map.Entry<String, ChartResp> entry : legendCpMap.entrySet()) {
            try {
                RegLineChart cp = entry.getValue().getLineChart();
                Map<String, Long> typeNameTotalMap = new HashMap<String, Long>();

                String[] typeNames = cp.getyAxisData();
                long[] typeCounts = cp.getSeriesData();

                for (int i = 0; i < typeNames.length; i++) {
                    try {
                        typeNameTotalMap.put(typeNames[i], typeCounts[i]);
                    } catch (Exception e) {
                        LogUtils.writeLogs(logger, e.getMessage());
                    }
                }

                typeNameTotalMaps.add(typeNameTotalMap);
            } catch (Exception e) {
                LogUtils.writeLogs(logger, e.getMessage());
            }
        }
        return typeNameTotalMaps;
    }

    @Deprecated
    protected void addMapForTypeNameTotal(List<Map<String, Long>> typeNameTotalMaps) {
        int size = typeNameTotalMaps.size();
        for (int i = 0; i < size; i++) {
            Map<String, Long> currMap = typeNameTotalMaps.get(i);

            for (int j = 0; j < size; j++) {
                try {
                    if (j != i) {
                        Map<String, Long> otherMap = typeNameTotalMaps.get(j);

                        for (Map.Entry<String, Long> otherEntry : otherMap.entrySet()) {
                            try {
                                String otherKey = otherEntry.getKey();
                                Long currOneVal = currMap.get(otherKey);

                                if (currOneVal == null) {
                                    currMap.put(otherKey, 0L);
                                }
                            } catch (Exception e) {
                                LogUtils.writeLogs(logger, e.getMessage());
                            }
                        }
                    }
                } catch (Exception e) {
                    LogUtils.writeLogs(logger, e.getMessage());
                }
            }
        }

    }


    /**
     * 百度统计里的 date 已经是 yyyyMMdd，所以不需要再 format
     */
    protected String parseTime(String createTime, boolean formatToNhAnd_, boolean accurateToHour) throws Exception {
        String timeParsed = null;
        if (accurateToHour) {
            timeParsed = getHourFromCreateTime(createTime, formatToNhAnd_);
        } else {
            if (formatToNhAnd_) {
                timeParsed = RegDateUtils.formatToNoHourAnd_(RegDateUtils.parseStartWithFF(createTime));
            } else {
                timeParsed = createTime;
            }
        }
        return timeParsed;
    }

    private String getHourFromCreateTime(String createTime, boolean formatToNhAnd_) throws Exception {
        Date date = null;
//        if (formatToNhAnd_) {
            date = RegDateUtils.parseStartWithFF(createTime);
//        } else {
//            date = RegDateUtils.parseToNoHourAnd_(createTime);
//        }

        Calendar calendar = RegCalUtils.getCalendarBy(date);
        return String.valueOf(calendar.get(Calendar.HOUR_OF_DAY));
    }


    protected Map<String,Long> getEmptyDateTotalMap(String startDate, String endDate, boolean accurateToHour) throws Exception {
        Map<String,Long> dateTotalMap = new HashMap<String, Long>();

        Calendar startCal = RegCalUtils.getCalendarBy(RegDateUtils.parseToNoHourAnd_(startDate));
        Calendar endCal = RegCalUtils.getCalendarBy(RegDateUtils.parseToNoHourAnd_(endDate));

        if (accurateToHour) {
            for (int i = 0; i <= 23; i++) {
                dateTotalMap.put(String.valueOf(i), 0L);
            }
        } else {
            while (!startCal.equals(endCal)) {
                String curDateStr = RegDateUtils.formatToNoHourAnd_(startCal.getTime());
                dateTotalMap.put(curDateStr, 0L);

                startCal.add(Calendar.DAY_OF_MONTH, 1);
            }
        }

        return dateTotalMap;
    }


    protected String changeHourFormat(String time) {
        if (time.length() == 1) {
            time = StringUtils.joinStr("0", time, ":00");
        } else {
            time = StringUtils.joinStr(time, ":00");
        }
        return time;
    }



}
