package org.jumao.bi.service.impl.trade.register;

import javax.ws.rs.core.Response;

import com.google.gson.Gson;
import org.apache.log4j.Logger;
import org.jumao.bi.dao.trade.RegisterDao;
import org.jumao.bi.entites.trade.register.*;
import org.jumao.bi.entites.trade.register.vo.GroupByVo;
import org.jumao.bi.entites.trade.register.vo.TimeTotalVo;
import org.jumao.bi.service.trade.register.RegisterAnalysis;
import org.jumao.bi.utis.GeneralUtils;
import org.jumao.bi.utis.LogUtils;
import org.jumao.bi.utis.RespUtils;
import org.jumao.bi.utis.StringUtils;
import org.jumao.bi.utis.enums.AUOType;
import org.jumao.bi.utis.enums.VUOType;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.Map;

public class RegisterAnalysisImpl extends RegisterBasic implements RegisterAnalysis {

	private Logger logger = Logger.getLogger(this.getClass());
	private Gson gson = new Gson();
	private String START_TO = "start to";

	@Autowired
	private RegisterDao registerDao;



	public Response getNewRegLineChart(String platform, String startDate, String endDate) throws Exception {
		LogUtils.writeLogs(logger, checkAndlogDateRange(platform, startDate, endDate));

		List<TimeTotalVo> list = registerDao.getNewlyIncrBy(platform, startDate, endDate);
		return Response.ok().entity(getLineChartFromNewRegs(list, "新增注册数", true)).build();
	}


	public Response getNewRegPieChart(String platform, String startDate, String endDate) throws Exception {
		LogUtils.writeLogs(logger, checkAndlogDateRange(platform, startDate, endDate));

		List<GroupByVo> list = registerDao.getDataSrcIncrBy(platform, startDate, endDate);
		return Response.ok().entity(getPieChartFromGroupByVo(list, dataSrcNameMap)).build();
	}


	public Response getNewRegTable(String platform, String startDate, String endDate) throws Exception {
		LogUtils.writeLogs(logger, checkAndlogDateRange(platform, startDate, endDate));

		List<DataSrcIncrTable> list = registerDao.getDataSrcIncrTableBy(platform, startDate, endDate);
		long totalUser = registerDao.getTotalUserCounts();

		return Response.ok().entity(getTableFromNewRegs(list, totalUser)).build();
	}


	public Response getAuthUOverview(String platform, String startDate, String endDate, String typeStr) throws Exception {
		LogUtils.writeLogs(logger, checkAndlogDateRange(platform, startDate, endDate));
		int type = RespUtils.checkType(typeStr);
		List<TimeTotalVo> list = null;

		if (AUOType.PV.getType() == type) {
			list = registerDao.getPvOrUvBy(platform, startDate, endDate, true);

		} else if (AUOType.UV.getType() == type) {
			list = registerDao.getPvOrUvBy(platform, startDate, endDate, false);

		} else if (AUOType.REGISTER.getType() == type) {
			list = registerDao.getNewlyIncrBy(platform, startDate, endDate);

		} else if (AUOType.THREE_CERT_AUTH.getType() == type) {
			list = registerDao.get3CertAuthBy(startDate, endDate);

		} else if (AUOType.AUTH_LETTER.getType() == type) {
			list = registerDao.getAuthLetterBy(startDate, endDate);
		}
		return Response.ok().entity(getLineChartFromNewRegs(list, AUOType.getNameByType(type), true)).build();
	}


	public Response getAuthUCert3History(String platform) throws Exception {
		RespUtils.checkPlatform(platform);
		LogUtils.writeLogs(logger, StringUtils.joinStr(
				GeneralUtils.getCurrMethod(), ", platform:", platform));

		List<GroupByVo> list = registerDao.getAuthUCert3HistoryBy(platform);
		return Response.ok().entity(getPieChartFromGroupByVo(list, compCategoryMap)).build();
	}


	public Response getAuthUPassedHistogram(String platform, String startDate, String endDate) throws Exception {
		LogUtils.writeLogs(logger, checkAndlogDateRange(platform, startDate, endDate));

		List<TimeTotalVo> list = registerDao.get3CertAuthBy(startDate, endDate);
		return Response.ok().entity(getLineChartFromNewRegs(list, "认证审核通过", true)).build();
	}


	public Response getAuthULicPercentPie(String platform, String startDate, String endDate) throws Exception {
		LogUtils.writeLogs(logger, checkAndlogDateRange(platform, startDate, endDate));

		List<GroupByVo> list = registerDao.getAuthULicPercPieBy(platform, startDate, endDate);
		return Response.ok().entity(getPieChartFromGroupByVo(list, cert3TpyeNameMap)).build();
	}


	public Response getAuthUAreaDist(String platform, String startDate, String endDate) throws Exception {
		LogUtils.writeLogs(logger, checkAndlogDateRange(platform, startDate, endDate));

		List<GroupByVo> list = registerDao.getAuthUAreaDist(0);
		return Response.ok().entity(getPieChartFromGroupByVo(list, getProvinceCodeNameMap(list))).build();
	}


	public Response getAuthUAreaDistTop10(String platform, String startDate, String endDate) throws Exception {
		LogUtils.writeLogs(logger, checkAndlogDateRange(platform, startDate, endDate));

		List<GroupByVo> list = registerDao.getAuthUAreaDist(10);
		return Response.ok().entity(getBarChartFromNewRegs(list, getProvinceCodeNameMap(list), "三证、授权地域分布TOP10")).build();
	}


	public Response getVisaUOverview(String platform, String startDate, String endDate, String typeStr) throws Exception {
		LogUtils.writeLogs(logger, checkAndlogDateRange(platform, startDate, endDate));
		int type = RespUtils.checkType(typeStr);
		List<TimeTotalVo> list = null;
		boolean formatToNhAnd_ = true;

		if (VUOType.PV.getType() == type) {
			list = registerDao.getPvOrUvBy(platform, startDate, endDate, true);
			formatToNhAnd_ = false;

		} else if (VUOType.UV.getType() == type) {
			list = registerDao.getPvOrUvBy(platform, startDate, endDate, false);
			formatToNhAnd_ = false;

		} else if (VUOType.VISA.getType() == type) {
			list = registerDao.getVisaTTVsBy(platform, startDate, endDate);

		} else if (VUOType.PAY.getType() == type) {
			list = registerDao.getPayTTVsBy(platform, startDate, endDate);

		}
		return Response.ok().entity(getLineChartFromNewRegs(list, VUOType.getNameByType(type), formatToNhAnd_)).build();
	}


	public Response getVisaUAreaDist() {
		try {
			LogUtils.writeLogs(logger, GeneralUtils.getCurrMethod(START_TO));

			List<VisaUAreaDist> list = registerDao.getVisaUAreaDist("2015-5-1", "2017-7-1");

			for (VisaUAreaDist ele : list) {
				System.err.println(gson.toJson(ele));
			}

			return Response.ok().entity("ok3").build();
		} catch (Exception e) {
			e.printStackTrace();
			return Response.ok().entity("error").build();
		}
	}


	public Response getPayUAreaDist() {
		LogUtils.writeLogs(logger, GeneralUtils.getCurrMethod(START_TO));

		List<PayUAreaDist> list = registerDao.getPayUAreaDist();

		for (PayUAreaDist ele : list) {
			System.err.println(gson.toJson(ele));
			System.out.println();
		}
		return Response.ok().entity("ok").build();
	}


}
