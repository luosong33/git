package org.jumao.bi.service.impl.baidu;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.jumao.bi.constant.MapConstants;
import org.jumao.bi.entites.baidu.AreasDistrictResponse;
import org.jumao.bi.entites.baidu.DailyMetricBean;
import org.jumao.bi.entites.baidu.NOVisitorsBean;
import org.jumao.bi.entites.baidu.NOVisitorsChart;
import org.jumao.bi.entites.baidu.TopPageBean;
import org.jumao.bi.entites.baidu.TopPageResponse;
import org.jumao.bi.entites.baidu.TrendChart;
import org.jumao.bi.entites.baidu.TrendResponse;
import org.jumao.bi.entites.baidu.VisitorsSourcesBean;
import org.jumao.bi.entites.baidu.VistSourcesResponse;
import org.jumao.bi.entites.baidu.VistorBean;
import org.jumao.bi.entites.baidu.VistorsTypeResponse;
import org.jumao.bi.entites.charts.BarChart;
import org.jumao.bi.entites.charts.CommonBean;
import org.jumao.bi.entites.charts.LineChart;
import org.jumao.bi.entites.charts.PieChart;

public class BaiduSvcHelper {
	private static Map<String, String> metricMap = new HashMap<String, String>();
	static {
		metricMap.put("pv", "浏览量PV_次");
		metricMap.put("uv", "访客数UV_个");
		metricMap.put("ip", "IP数_个");
		metricMap.put("averageTime", "平均停留时长_秒");
		metricMap.put("avgVisitPages", "平均访问页数_次");
		metricMap.put("exitRate", "跳出率_%");
	}

	public static void buildTrendCharts(List<DailyMetricBean> data,
			List<String> dates, Map<String, Object> resultMap) {

		Map<String, DailyMetricBean> metricMap = new HashMap<String, DailyMetricBean>();
		for (DailyMetricBean dailyBean : data) {
			String date = dailyBean.getDate();
			metricMap.put(date, dailyBean);
		}

		int size = dates.size();
		String[] xAxisData = (String[]) dates.toArray(new String[size]);
		BigDecimal[] pvSeriesData = new BigDecimal[size];
		BigDecimal[] uvSeriesData = new BigDecimal[size];
		BigDecimal[] ipSeriesData = new BigDecimal[size];
		BigDecimal[] averageTimeSeriesData = new BigDecimal[size];
		BigDecimal[] exitRateSeriesData = new BigDecimal[size];
		BigDecimal[] avgVisitPagesSeriesData = new BigDecimal[size];

		for (int i = 0; i < size; i++) {

			if (metricMap.containsKey(xAxisData[i])) {
				DailyMetricBean dailyBean = metricMap.get(xAxisData[i]);
				pvSeriesData[i] = new BigDecimal(dailyBean.getPv());
				uvSeriesData[i] = new BigDecimal(dailyBean.getUv());
				ipSeriesData[i] = new BigDecimal(dailyBean.getIps());
				averageTimeSeriesData[i] = new BigDecimal(dailyBean.getStayTime());
				exitRateSeriesData[i] = new BigDecimal(dailyBean.getExits())
						.setScale(2, RoundingMode.HALF_UP);
				avgVisitPagesSeriesData[i] = new BigDecimal(
						dailyBean.getAvgVisitPages()).setScale(2,
						RoundingMode.HALF_UP);
			} else {
				pvSeriesData[i] = BigDecimal.ZERO;
				uvSeriesData[i] = BigDecimal.ZERO;
				ipSeriesData[i] = BigDecimal.ZERO;
				averageTimeSeriesData[i] = BigDecimal.ZERO;
				exitRateSeriesData[i] = BigDecimal.ZERO;
				avgVisitPagesSeriesData[i] = BigDecimal.ZERO;
			}

		}

		resultMap.put("xAxisData", xAxisData);
		resultMap.put("uvSeriesData", uvSeriesData);
		resultMap.put("pvSeriesData", pvSeriesData);
		resultMap.put("ipSeriesData", ipSeriesData);
		resultMap.put("averageTimeSeriesData", averageTimeSeriesData);
		resultMap.put("avgVisitPagesSeriesData", avgVisitPagesSeriesData);
		resultMap.put("exitRateSeriesData", exitRateSeriesData);

	}

	public static TrendChart buildTrendChart(Map<String, Object> resultMap,
			String key) {
		TrendChart chart = new TrendChart();
		String[] nameArray = metricMap.get(key).split("_");
		chart.setTitle(nameArray[0] + "趋势情况");
		chart.setSeriesName(nameArray[0]);
		chart.setUnit(nameArray[1]);
		BigDecimal[] seriesData = (BigDecimal[]) resultMap.get(key
				+ "SeriesData");
		chart.setSeriesData(seriesData);
		return chart;
	}

	public static void buildTrendResponse(TrendResponse response,
			Map<String, Object> resultMap) {
		response.setxAxisData((String[]) resultMap.get("xAxisData"));
		response.setPvChart(BaiduSvcHelper.buildTrendChart(resultMap, "pv"));
		response.setUvChart(BaiduSvcHelper.buildTrendChart(resultMap, "uv"));
		response.setIpChart(BaiduSvcHelper.buildTrendChart(resultMap, "ip"));
		response.setAverageTimeChart(BaiduSvcHelper.buildTrendChart(resultMap,
				"averageTime"));
		response.setAvgVisitPagesChart(BaiduSvcHelper.buildTrendChart(
				resultMap, "avgVisitPages"));
		response.setExitRateChart(BaiduSvcHelper.buildTrendChart(resultMap,
				"exitRate"));
	}

	public static void buildBarCharts(List<TopPageBean> data,
			Map<String, Object> resultMap) {
		Map<String, BigDecimal[]> nameMap = new HashMap<String, BigDecimal[]>();
		for (TopPageBean pageBean : data) {
			String name = pageBean.getName();

			BigDecimal pvCount = pageBean.getPvCount();
			BigDecimal exitCount = pageBean.getExitcount();
			if (nameMap.containsKey(name)) {
				BigDecimal[] tempArray = nameMap.get(name);
				BigDecimal[] newArray = { tempArray[0].add(pvCount),
						tempArray[1].add(exitCount) };
				nameMap.put(name, newArray);

			} else {
				BigDecimal[] array = { pvCount, exitCount };
				nameMap.put(name, array);
			}
		}

		List<TopPageBean> pvList = new ArrayList<TopPageBean>();
		List<TopPageBean> existList = new ArrayList<TopPageBean>();
		for (Map.Entry<String, BigDecimal[]> entry : nameMap.entrySet()) {
			String name = entry.getKey();
			BigDecimal[] values = entry.getValue();
			TopPageBean pvBean = new TopPageBean(name, values[0],
					BigDecimal.ZERO);
			TopPageBean existBean = new TopPageBean(name, BigDecimal.ZERO,
					values[1]);
			pvList.add(pvBean);
			existList.add(existBean);
		}

		Collections.sort(pvList, new Comparator<TopPageBean>() {
			public int compare(TopPageBean obj1, TopPageBean obj2) {
				return obj2.getPvCount().compareTo(obj1.getPvCount());
			}
		});

		Collections.sort(existList, new Comparator<TopPageBean>() {
			public int compare(TopPageBean obj1, TopPageBean obj2) {
				return obj2.getExitcount().compareTo(obj1.getExitcount());
			}
		});

		List<TopPageBean> topPVList = new ArrayList<TopPageBean>();
		if (pvList.size() > 5) {// 只取top5
			topPVList = pvList.subList(0, 5);
		} else {
			topPVList.addAll(pvList);
		}

		List<TopPageBean> topExistList = new ArrayList<TopPageBean>();
		if (existList.size() > 5) {// 只取top5
			topExistList = existList.subList(0, 5);
		} else {
			topExistList.addAll(existList);
		}

		int pvSize = topPVList.size();
		String[] yAxisData4PV = new String[pvSize];
		BigDecimal[] seriesData4PV = new BigDecimal[pvSize];
		for (int i = 0; i < pvSize; i++) {
			TopPageBean pvBean = topPVList.get(i);
			yAxisData4PV[i] = pvBean.getName();
			seriesData4PV[i] = pvBean.getPvCount();
		}
		BarChart pvChart = new BarChart();
		pvChart.setyAxisData(yAxisData4PV);
		pvChart.setSeriesData(seriesData4PV);
		pvChart.setSeriesName("页面流量排名");

		int existSize = topExistList.size();
		String[] yAxisData4Exist = new String[existSize];
		BigDecimal[] seriesData4Exist = new BigDecimal[existSize];
		for (int i = 0; i < existSize; i++) {
			TopPageBean existBean = topExistList.get(i);
			yAxisData4Exist[i] = existBean.getName();
			seriesData4Exist[i] = existBean.getExitcount();
		}
		BarChart existCountChart = new BarChart();
		existCountChart.setyAxisData(yAxisData4Exist);
		existCountChart.setSeriesData(seriesData4Exist);
		existCountChart.setSeriesName("页面跳出排名");

		resultMap.put("pvChart", pvChart);
		resultMap.put("existCountChart", existCountChart);
	}

	public static void buildVistTopResponse(TopPageResponse response,
			Map<String, Object> resultMap) {
		response.setPvChart((BarChart) resultMap.get("pvChart"));
		response.setExistCountChart((BarChart) resultMap.get("existCountChart"));
	}

	public static void buildTableCharts(List<NOVisitorsBean> data,
			Map<String, Object> resultMap) {

		// 参照之前运营分析的逻辑，目前没有找到合适的百度API获取数据。
		Integer nVisiotsPVCount = 0;// 新访客访问pv
		Integer nVisiotsUVCount = 0;// 新访客访问uv
		Integer oVisiotsPVCount = 0;// 老访客访问pv
		Integer oVisiotsUVCount = 0;// 老访客访问uv
		double nvisitTimeSum = 0.0;// 新访客访问总时长
		double ovisitTimeSum = 0.0;// 老访客访问总时长
		double nvisitPageSum = 0.0;// 新访客访问总页面
		double ovisitPageSum = 0.0;// 老访客访问总页面
		for (NOVisitorsBean nOVisitorsBean : data) {
			// 新访客除以总访客乘以页面数
			int visitCount = nOVisitorsBean.getVisitorCount();
			int newVisitCount = nOVisitorsBean.getNewVisitorCount();
			int oldVisitCount = visitCount - newVisitCount;
			int pvCount = nOVisitorsBean.getPvCount();
			double avgTime = nOVisitorsBean.getAvgVisitTime();
			double avgPage = nOVisitorsBean.getAvgVisitPage();
			double newPV = newVisitCount * 1.0 / visitCount * pvCount;
			nVisiotsPVCount += (int) newPV;
			// 新访客uv
			nVisiotsUVCount += newVisitCount;
			// 老访客pv
			oVisiotsPVCount += pvCount - (int) newPV;
			// 老访客uv
			oVisiotsUVCount += oldVisitCount;

			// 新访客访问时长
			nvisitTimeSum += newVisitCount * avgTime * 1.0;
			ovisitTimeSum += oldVisitCount * avgTime * 1.0;

			nvisitPageSum += newVisitCount * avgPage * 1.0;
			ovisitPageSum += oldVisitCount * avgPage * 1.0;
		}

		// chart.setnVisiotsPVCount(nVisiotsPVCount);
		// chart.setnVisiotsUVCount(nVisiotsUVCount);
		// chart.setnVisitTime(nvisitTimeSum/(nVisiotsUVCount==0?1:nVisiotsUVCount));//新访客访问总时长除以新访客数
		// chart.setoVisiotsPVCount(oVisiotsPVCount);
		// chart.setoVisiotsUVCount(oVisiotsUVCount);
		// chart.setoVisitTime(ovisitTimeSum/(oVisiotsUVCount==0?1:oVisiotsUVCount));//老访客访问时长除以老访客数
		DecimalFormat df = new DecimalFormat("#####0.00");
		List<VistorBean> vistors = new ArrayList<VistorBean>();
		VistorBean pvBean = new VistorBean("浏览量", nVisiotsPVCount.toString(),
				oVisiotsPVCount.toString());
		VistorBean uvBean = new VistorBean("访客数", nVisiotsUVCount.toString(),
				oVisiotsUVCount.toString());
		VistorBean vtBean = new VistorBean("平均访问时长", formatTime(nvisitTimeSum,
				nVisiotsUVCount), formatTime(ovisitTimeSum, oVisiotsUVCount));
		VistorBean vpBean = new VistorBean("平均访问页面", df.format(nvisitPageSum
				/ (nVisiotsUVCount == 0 ? 1 : nVisiotsUVCount)),
				df.format(ovisitPageSum
						/ (oVisiotsUVCount == 0 ? 1 : oVisiotsUVCount)));
		vistors.add(pvBean);
		vistors.add(uvBean);
		vistors.add(vtBean);
		vistors.add(vpBean);
		Integer totalUVCount = nVisiotsUVCount + oVisiotsUVCount;

		String newPercent = "0.00%";
		String oldPercent = "0.00%";
		if (totalUVCount != 0) {
			newPercent = df.format(1.0 * nVisiotsUVCount / totalUVCount * 100)
					.toString() + "%";
			oldPercent = df.format(
					(1 - 1.0 * nVisiotsUVCount / totalUVCount) * 100)
					.toString()
					+ "%";
		}
		resultMap.put("newPercent", newPercent);
		resultMap.put("oldPercent", oldPercent);
		resultMap.put("tableChart", vistors);
	}

	public static void buildVistorsTypeResponse(VistorsTypeResponse response,
			Map<String, Object> resultMap) {
		response.setTableData((List<VistorBean>) resultMap.get("tableChart"));
		response.setNewPercent((String) resultMap.get("newPercent"));
		response.setOldPercent((String) resultMap.get("oldPercent"));
	}

	public static void buildGrapCharts(List<CommonBean> data,
			Map<String, Object> resultMap) throws IOException {
		// sum
		Map<String, Integer> tmpMap = new HashMap<String, Integer>();

		if (CollectionUtils.isEmpty(data)) {
			// set all province value 0
			for (Map.Entry<String, Long> entry : MapConstants.CHINA_MAP
					.entrySet()) {
				CommonBean bean = new CommonBean(entry.getKey(),
						String.valueOf(entry.getValue()));
				data.add(bean);
			}
			resultMap.put("maxValue", 0);
			resultMap.put("vAreaList", data);

		}

		for (CommonBean bean : data) {
			if (tmpMap.containsKey(bean.getName())) {
				int value = tmpMap.get(bean.getName());
				tmpMap.put(
						bean.getName(),
						Integer.valueOf(value)
								+ Integer.valueOf(bean.getValue()));
			} else {
				tmpMap.put(bean.getName(), Integer.valueOf(bean.getValue()));
			}
		}

		data = new ArrayList<CommonBean>();
		for (Map.Entry<String, Integer> entry : tmpMap.entrySet()) {
			CommonBean bean = new CommonBean(entry.getKey(), entry.getValue()
					.toString());
			data.add(bean);
		}

		// get max value
		int maxValue = getMaxValue(data);
		resultMap.put("maxValue", maxValue);
		resultMap.put("vAreaList", data); // name : value

	}

	private static String formatTime(double visistTime, int visitCount) {

		int avgSecond = (int) visistTime / ((visitCount == 0) ? 1 : visitCount);
		int minute = avgSecond / 60;
		int second = avgSecond % 60;
		String minuteStr = (minute < 10) ? ("0" + minute) : String
				.valueOf(minute);
		String secondStr = (second < 10) ? ("0" + second) : String
				.valueOf(second);
		String timeStr = "00:" + minuteStr + ":" + secondStr;

		return timeStr;

	}

	private static int getMaxValue(List<CommonBean> beanList)
			throws IOException {
		int maxValue = 0;
		List<Integer> valueList = new ArrayList<Integer>();
		for (CommonBean bean : beanList) {
			if (StringUtils.isNotBlank(bean.getValue())) {
				valueList.add(Integer.valueOf((bean.getValue())));
			}
			maxValue = Collections.max(valueList);
		}
		return maxValue;
	}

	public static void buildAreasDistrictResponse(
			AreasDistrictResponse response, Map<String, Object> resultMap) {
		response.setData((List<CommonBean>) resultMap.get("vAreaList"));
		response.setMax((Integer) resultMap.get("maxValue"));

	}

	public static void buildVistSourcesCharts(List<VisitorsSourcesBean> data,
			List<String> dates, Map<String, Object> resultMap) {

		PieChart pieChart = new PieChart();
		LineChart lineChart = new LineChart();
		int size = dates.size();
		String[] xAxisData = (String[]) dates.toArray(new String[size]);

		Map<String, Integer> nameMap = new HashMap<String, Integer>();
		Map<String, Map<String, Integer>> dateMap = new HashMap<String, Map<String, Integer>>();
		for (VisitorsSourcesBean bean : data) {
			String date = bean.getDate();
			String name = bean.getName();
			Integer value = bean.getValue();
			if (nameMap.containsKey(name)) {
				nameMap.put(name, nameMap.get(name) + value);
			} else {
				nameMap.put(name, value);
			}

			Map<String, Integer> nameValue = new HashMap<String, Integer>();
			nameValue.put(name, value);
			if (dateMap.containsKey(date)) {
				Map<String, Integer> temp = dateMap.get(date);
				temp.put(name, value);
				dateMap.put(date, temp);
			} else {
				dateMap.put(date, nameValue);
			}

		}

		List<CommonBean> seriesData = new ArrayList<CommonBean>();
		List<String> legends = new ArrayList<String>();
		List<int[]> lineData = new ArrayList<int[]>();
		for (Map.Entry<String, Integer> entry : nameMap.entrySet()) {
			String name = entry.getKey();
			String value = entry.getValue().toString();
			CommonBean pieBean = new CommonBean(name, value);
			seriesData.add(pieBean);
			legends.add(name);
		}

		for (String name : legends) {
			int[] nameArray = new int[dates.size()];
			for (int i = 0; i < dates.size(); i++) {
				if (dateMap.containsKey(xAxisData[i])) {
					Map<String, Integer> temp = dateMap.get(xAxisData[i]);
					if (temp.containsKey(name)) {
						nameArray[i] = temp.get(name);
					}
				}
			}

			lineData.add(nameArray);

		}
		String[] legendData = (String[]) legends.toArray(new String[legends
				.size()]);
		pieChart.setSeriesData(seriesData);
		pieChart.setLegendData(legendData);

		lineChart.setLegendData(legendData);
		lineChart.setxAxisData(xAxisData);
		lineChart.setSeriesData(lineData);

		resultMap.put("pieChart", pieChart);
		resultMap.put("lineChart", lineChart);

	}

	public static void buildVistSourceResponse(VistSourcesResponse response,
			Map<String, Object> resultMap) {
		response.setPieChart((PieChart) resultMap.get("pieChart"));
		response.setLineChart((LineChart) resultMap.get("lineChart"));
	}

    public static void buildBaiduOverview(List<DailyMetricBean> data, List<String> dates, Map<String, Object> resultMap) {
        // TODO Auto-generated method stub
        
        BigDecimal pvs = BigDecimal.ZERO;
        BigDecimal uvs = BigDecimal.ZERO;
        BigDecimal ips = BigDecimal.ZERO;
        BigDecimal averageTimes = BigDecimal.ZERO;
        BigDecimal exitRates = BigDecimal.ZERO;
        BigDecimal avgVisitPages = BigDecimal.ZERO;
        for (DailyMetricBean dailyBean : data) {
            pvs = pvs.add(new BigDecimal(dailyBean.getPv()));
            uvs = uvs.add(new BigDecimal(dailyBean.getUv()));
            ips = ips.add(new BigDecimal(dailyBean.getIps()));
            averageTimes = averageTimes.add(new BigDecimal(dailyBean.getStayTime()));
            exitRates = exitRates.add(new BigDecimal(dailyBean.getExits())
            .setScale(2, RoundingMode.HALF_UP));
            avgVisitPages = avgVisitPages.add(new BigDecimal(
                    dailyBean.getAvgVisitPages()).setScale(2,
                    RoundingMode.HALF_UP));
        }
        
        BigDecimal size =  data.isEmpty() ? BigDecimal.ONE : new BigDecimal(data.size()) ;//size 默认值为1， 避免为0当除数的情况
    
        resultMap.put("pvs", pvs);
        resultMap.put("uvs", uvs);
        resultMap.put("ips", ips);
        resultMap.put("averageTimes", averageTimes.divide(size, 0));
        resultMap.put("exitRates", exitRates.divide(size, 2));
        resultMap.put("avgVisitPages", avgVisitPages.divide(size, 2));
    }

}
