package org.jumao.bi.dao.trade.impl;

import org.apache.log4j.Logger;
import org.jumao.bi.utis.*;
import org.jumao.bi.utis.constants.Key;
import org.jumao.bi.utis.constants.Table;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.Calendar;
import java.util.List;

/**
 * Created by kartty on 2017/5/4.
 */
public class GeneralBasicDao {

    private Logger logger = Logger.getLogger(GeneralBasicDao.class);

    @Autowired
    protected JdbcTemplate jdbcTemplate;

    protected int LEN_4 = 4;
    protected int LEN_6 = 6;
    protected String MS_PLATFORM_ID = "1001";



    protected String checkMsPlatformId(String platform) {
        if (MS_PLATFORM_ID.equals(platform)) {
            platform = dealPlatform(platform, LEN_4);
        } else {
            platform = null;
        }
        return platform;
    }

    protected String dealPlatform(String platform, int needLen) {
        int len = platform.length();
        if (len == needLen) {
            return platform;

        } else if (len < needLen) {
            int diff = needLen - len;
            StringBuilder sb = new StringBuilder(platform);
            for (int i = 0; i < diff; i++) {
                sb.append("0");
            }
            platform = sb.toString();

        } else {
            platform = platform.substring(0, needLen);
        }
        LogUtils.writeLogs(logger, StringUtils.joinStr(GeneralUtils.getCurrMethod(),
                " transform new platform:", platform));
        return platform;
    }

    protected String dealStartDate(String startDate) throws Exception {
        return RegDateUtils.formatToFullF(RegDateUtils.parseToNoHourAnd_(startDate));
    }

    protected String dealEndDate(String endDate) throws Exception {
        Calendar c = RegCalUtils.getCalendarBy(RegDateUtils.parseToNoHourAnd_(endDate));
        c.add(Calendar.SECOND, 86399);//加上 24*60*60 -1 秒
        return RegDateUtils.formatToFullF(c.getTime());
    }


    protected <T> List<T> getVoList(String sql, Class<T> clazz) {
        return jdbcTemplate.query(sql, new BeanPropertyRowMapper<T>(clazz));
    }


    protected String getCrtTmGroupLength(boolean accurateToHour) {
        String tmLen = null;
        if (accurateToHour) {
            tmLen = "13";
        } else {
            tmLen = "10";
        }
        return StringUtils.joinStr("strleft(CAST(create_time AS string), ", tmLen, ")");
    }


    protected String sqlOfGroupByTradeCompanyCrtTm(String firstCondi, String startDate, String endDate, boolean accurateToHour) {
        String tmGrpLen = getCrtTmGroupLength(accurateToHour);
        return StringUtils.joinStr(
                "select ", tmGrpLen, " as ", Key.CREATE_TIME,
                ", count(distinct comp_id) as ", Key.TOTAL, " from ", Table.TRADE_COMPANY,
                " where ", firstCondi, " delete_flag = 0 and",
                " (create_time between '", startDate, "' and '", endDate, "')",
                " group by ", Key.CREATE_TIME, " order by ", Key.CREATE_TIME, " asc");
    }


    protected String sqlOfGroupByTradeCompayArea(String firstCondi, String startDate, String endDate, int topEle) {
        return StringUtils.joinStr(
                "SELECT t.", Key.TYPE, ", a.area_name as ", Key.TYPE_NAME, ", t.", Key.TOTAL,
                " FROM (SELECT count(DISTINCT c.comp_id) as ", Key.TOTAL, ", c.address_province as ", Key.TYPE,
                " FROM ", Table.TRADE_COMPANY, " c WHERE ", firstCondi, " c.delete_flag = 0 and c.address_province is not null and",
                " (c.create_time between '", startDate, "' and '", endDate, "')",
                " GROUP BY c.address_province",
                topEle > 0 ? StringUtils.joinStr(" order by ", Key.TOTAL, " desc limit ", topEle) : "",
                " ) t LEFT JOIN ", Table.AREA, " a ON t.", Key.TYPE, " = a.area_code");
    }



}
